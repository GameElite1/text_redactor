import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, XCircle, BookOpen, X } from 'lucide-react';

interface SpellCheckerProps {
  isOpen: boolean;
  onClose: () => void;
  content: string;
}

interface SpellError {
  word: string;
  position: number;
  suggestions: string[];
}

// Обширный словарь русских слов с морфологическими формами
const russianDict = new Set([
  // Служебные слова и местоимения
  'и', 'в', 'не', 'на', 'я', 'быть', 'он', 'она', 'оно', 'они', 'мы', 'вы', 'ты', 'с', 'что', 'а', 'по', 'это', 'этот', 'эта', 'эти', 'к', 'но', 'как', 'из', 'у', 'который', 'которая', 'которое', 'которые', 'то', 'та', 'те', 'за', 'свой', 'своя', 'своё', 'свои', 'её', 'его', 'их', 'так', 'если', 'о', 'об', 'от', 'до', 'для', 'да', 'нет', 'уж', 'или', 'ни', 'при', 'над', 'под', 'там', 'тут', 'где', 'куда', 'откуда', 'когда', 'почему', 'зачем', 'чтобы', 'что', 'чего', 'чему', 'чем', 'чём',
  
  // Numbers
  'один', 'одна', 'одно', 'одни', 'одного', 'одной', 'одному', 'одним', 'одном', 'два', 'две', 'двух', 'двум', 'двумя', 'три', 'трёх', 'трём', 'тремя', 'четыре', 'четырёх', 'четырём', 'четырьмя', 'пять', 'пяти', 'пятью', 'шесть', 'шести', 'шестью', 'семь', 'семи', 'семью', 'восемь', 'восьми', 'восемью', 'девять', 'девяти', 'девятью', 'десять', 'десяти', 'десятью', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто', 'сто', 'тысяча', 'миллион', 
  
  // Глагол "быть" - все формы
  'быть', 'есть', 'был', 'была', 'было', 'были', 'буду', 'будешь', 'будет', 'будем', 'будете', 'будут', 'буди', 'будьте', 'будучи', 'бывший', 'бывшая', 'бывшее', 'бывшие',
  
  // Глагол "иметь"
  'иметь', 'имею', 'имеешь', 'имеет', 'имеем', 'имеете', 'имеют', 'имел', 'имела', 'имело', 'имели', 'имей', 'имейте', 'имея', 'имевший', 'имевшая', 'имевшее', 'имевшие',
  
  // Глагол "мочь"
  'мочь', 'могу', 'можешь', 'может', 'можем', 'можете', 'могут', 'мог', 'могла', 'могло', 'могли', 'мочь', 'могущий', 'могущая', 'могущее', 'могущие',
  
  // Глагол "сказать/говорить"
  'сказать', 'говорить', 'скажу', 'скажешь', 'скажет', 'скажем', 'скажете', 'скажут', 'сказал', 'сказала', 'сказало', 'сказали', 'говорю', 'говоришь', 'говорит', 'говорим', 'говорите', 'говорят', 'говорил', 'говорила', 'говорило', 'говорили', 'скажи', 'скажите', 'говори', 'говорите', 'сказав', 'говоря', 'сказавший', 'говоривший', 'сказанный', 'говоримый',
  
  // Глагол "знать"
  'знать', 'знаю', 'знаешь', 'знает', 'знаем', 'знаете', 'знают', 'знал', 'знала', 'знало', 'знали', 'знай', 'знайте', 'зная', 'знавший', 'знаемый', 'знакомый', 'знакомая', 'знакомое', 'знакомые',
  
  // Глагол "хотеть"
  'хотеть', 'хочу', 'хочешь', 'хочет', 'хотим', 'хотите', 'хотят', 'хотел', 'хотела', 'хотело', 'хотели', 'хоти', 'хотите', 'хотя', 'хотевший', 'хотимый',
  
  // Глагол "видеть"
  'видеть', 'вижу', 'видишь', 'видит', 'видим', 'видите', 'видят', 'видел', 'видела', 'видело', 'видели', 'види', 'видьте', 'видя', 'видевший', 'видимый', 'видный', 'видная', 'видное', 'видные',
  
  // Глагол "жить"
  'жить', 'живу', 'живёшь', 'живёт', 'живём', 'живёте', 'живут', 'жил', 'жила', 'жило', 'жили', 'живи', 'живите', 'живя', 'живший', 'живой', 'живая', 'живое', 'живые',
  
  // Глагол "стать"
  'стать', 'стану', 'станешь', 'станет', 'станем', 'станете', 'станут', 'стал', 'стала', 'стало', 'стали', 'стань', 'станьте', 'став', 'ставший',
  
  // Глагол "делать"
  'делать', 'делаю', 'делаешь', 'делает', 'делаем', 'делаете', 'делают', 'делал', 'делала', 'делало', 'делали', 'делай', 'делайте', 'делая', 'делавший', 'делаемый', 'дело', 'дела', 'делу', 'делом', 'деле',
  
  // Глагол "работать"
  'работать', 'работаю', 'работаешь', 'работает', 'работаем', 'работаете', 'работают', 'работал', 'работала', 'работало', 'работали', 'работай', 'работайте', 'работая', 'работавший', 'работа', 'работы', 'работе', 'работу', 'работой', 'работах',
  
  // Существительные с падежными формами
  'человек', 'люди', 'человека', 'людей', 'человеку', 'людям', 'человеком', 'людьми', 'человеке', 'людях',
  'мужчина', 'мужчины', 'мужчине', 'мужчину', 'мужчиной', 'мужчинах',
  'женщина', 'женщины', 'женщине', 'женщину', 'женщиной', 'женщинах',
  'ребёнок', 'дети', 'ребёнка', 'детей', 'ребёнку', 'детям', 'ребёнком', 'детьми', 'ребёнке', 'детях',
  'семья', 'семьи', 'семье', 'семью', 'семьёй', 'семьях',
  'дом', 'дома', 'дому', 'домом', 'доме', 'домов', 'домам', 'домами', 'домах',
  
  // Время
  'день', 'дня', 'дню', 'днём', 'дне', 'дни', 'дней', 'дням', 'днями', 'днях',
  'ночь', 'ночи', 'ночью', 'ночей', 'ночам', 'ночами', 'ночах',
  'утро', 'утра', 'утру', 'утром', 'утре', 'утер', 'утрам', 'утрами', 'утрах',
  'вечер', 'вечера', 'вечеру', 'вечером', 'вечере', 'вечеров', 'вечерам', 'вечерами', 'вечерах',
  'время', 'времени', 'временем', 'времена', 'времён', 'временам', 'временами', 'временах',
  'час', 'часа', 'часу', 'часом', 'часе', 'часы', 'часов', 'часам', 'часами', 'часах',
  'минута', 'минуты', 'минуте', 'минуту', 'минутой', 'минут', 'минутам', 'минутами', 'минутах',
  'секунда', 'секунды', 'секунде', 'секунду', 'секундой', 'секунд', 'секундам', 'секундами', 'секундах',
  'неделя', 'недели', 'неделе', 'неделю', 'неделей', 'недель', 'неделям', 'неделями', 'неделях',
  'месяц', 'месяца', 'месяцу', 'месяцем', 'месяце', 'месяцы', 'месяцев', 'месяцам', 'месяцами', 'месяцах',
  'год', 'года', 'году', 'годом', 'годе', 'годы', 'лет', 'годам', 'годами', 'годах',
  
  // Текстовый редактор
  'текст', 'текста', 'тексту', 'текстом', 'тексте', 'тексты', 'текстов', 'текстам', 'текстами', 'текстах',
  'слово', 'слова', 'слову', 'словом', 'слове', 'слов', 'словам', 'словами', 'словах',
  'предложение', 'предложения', 'предложению', 'предложением', 'предложении', 'предложений', 'предложениям', 'предложениями', 'предложениях',
  'абзац', 'абзаца', 'абзацу', 'абзацем', 'абзаце', 'абзацы', 'абзацев', 'абзацам', 'абзацами', 'абзацах',
  'страница', 'страницы', 'странице', 'страницу', 'страницей', 'страниц', 'страницам', 'страницами', 'страницах',
  'книга', 'книги', 'книге', 'книгу', 'книгой', 'книг', 'книгам', 'книгами', 'книгах',
  'документ', 'документа', 'документу', 'документом', 'документе', 'документы', 'документов', 'документам', 'документами', 'документах',
  'файл', 'файла', 'файлу', 'файлом', 'файле', 'файлы', 'файлов', 'файлам', 'файлами', 'файлах',
  'программа', 'программы', 'программе', 'программу', 'программой', 'программ', 'программам', 'программами', 'программах',
  'компьютер', 'компьютера', 'компьютеру', 'компьютером', 'компьютере', 'компьютеры', 'компьютеров', 'компьютерам', 'компьютерами', 'компьютерах',
  'редактор', 'редактора', 'редактору', 'редактором', 'редакторе', 'редакторы', 'редакторов', 'редакторам', 'редакторами', 'редакторах',
  
  // Функции редактора
  'поиск', 'поиска', 'поиску', 'поиском', 'поиске', 'поиски', 'поисков', 'поискам', 'поисками', 'поисках',
  'замена', 'замены', 'замене', 'замену', 'заменой', 'замен', 'заменам', 'заменами', 'заменах',
  'шрифт', 'шрифта', 'шрифту', 'шрифтом', 'шрифте', 'шрифты', 'шрифтов', 'шрифтам', 'шрифтами', 'шрифтах',
  'цвет', 'цвета', 'цвету', 'цветом', 'цвете', 'цвета', 'цветов', 'цветам', 'цветами', 'цветах',
  'размер', 'размера', 'размеру', 'размером', 'размере', 'размеры', 'размеров', 'размерам', 'размерами', 'размерах',
  'сохранить', 'сохраню', 'сохранишь', 'сохранит', 'сохраним', 'сохраните', 'сохранят', 'сохранил', 'сохранила', 'сохранило', 'сохранили',
  'открыть', 'открою', 'откроешь', 'откроет', 'откроем', 'откроете', 'откроют', 'открыл', 'открыла', 'открыло', 'открыли',
  'создать', 'создам', 'создашь', 'создаст', 'создадим', 'создадите', 'создадут', 'создал', 'создала', 'создало', 'создали',
  'удалить', 'удалю', 'удалишь', 'удалит', 'удалим', 'удалите', 'удалят', 'удалил', 'удалила', 'удалило', 'удалили',
  
  // Прилагательные - основные формы
  'большой', 'большая', 'большое', 'большие', 'большого', 'большой', 'большому', 'большую', 'большим', 'большом', 'больших', 'большими',
  'маленький', 'маленькая', 'маленькое', 'маленькие', 'маленького', 'маленькой', 'маленькому', 'маленькую', 'маленьким', 'маленьком', 'маленьких', 'маленькими',
  'хороший', 'хорошая', 'хорошее', 'хорошие', 'хорошего', 'хорошей', 'хорошему', 'хорошую', 'хорошим', 'хорошем', 'хороших', 'хорошими',
  'плохой', 'плохая', 'плохое', 'плохие', 'плохого', 'плохой', 'плохому', 'плохую', 'плохим', 'плохом', 'плохих', 'плохими',
  'новый', 'новая', 'новое', 'новые', 'нового', 'новой', 'новому', 'новую', 'новым', 'новом', 'новых', 'новыми',
  'старый', 'старая', 'старое', 'старые', 'старого', 'старой', 'старому', 'старую', 'старым', 'старом', 'старых', 'старыми',
  'красивый', 'красивая', 'красивое', 'красивые', 'красивого', 'красивой', 'красивому', 'красивую', 'красивым', 'красивом', 'красивых', 'красивыми',
  'умный', 'умная', 'умное', 'умные', 'умного', 'умной', 'умному', 'умную', 'умным', 'умном', 'умных', 'умными',
  'правильный', 'правильная', 'правильное', 'правильные', 'правильного', 'правильной', 'правильному', 'правильную', 'правильным', 'правильном', 'правильных', 'правильными',
  'русский', 'русская', 'русское', 'русские', 'русского', 'русской', 'русскому', 'русскую', 'русским', 'русском', 'русских', 'русскими',
  
  // Цвета
  'белый', 'белая', 'белое', 'белые', 'белого', 'белой', 'белому', 'белую', 'белым', 'белом', 'белых', 'белыми',
  'чёрный', 'чёрная', 'чёрное', 'чёрные', 'чёрного', 'чёрной', 'чёрному', 'чёрную', 'чёрным', 'чёрном', 'чёрных', 'чёрными',
  'красный', 'красная', 'красное', 'красные', 'красного', 'красной', 'красному', 'красную', 'красным', 'красном', 'красных', 'красными',
  'синий', 'синяя', 'синее', 'синие', 'синего', 'синей', 'синему', 'синюю', 'синим', 'синем', 'синих', 'синими',
  'зелёный', 'зелёная', 'зелёное', 'зелёные', 'зелёного', 'зелёной', 'зелёному', 'зелёную', 'зелёным', 'зелёном', 'зелёных', 'зелёными',
  'жёлтый', 'жёлтая', 'жёлтое', 'жёлтые', 'жёлтого', 'жёлтой', 'жёлтому', 'жёлтую', 'жёлтым', 'жёлтом', 'жёлтых', 'жёлтыми',
  
  // Системные термины
  'система', 'системы', 'системе', 'систему', 'системой', 'систем', 'системам', 'системами', 'системах',
  'настройки', 'настроек', 'настройкам', 'настройками', 'настройках',
  'пользователь', 'пользователя', 'пользователю', 'пользователем', 'пользователе', 'пользователи', 'пользователей', 'пользователям', 'пользователями', 'пользователях',
  'администратор', 'администратора', 'администратору', 'администратором', 'администраторе', 'администраторы', 'администраторов', 'администраторам', 'администраторами', 'администраторах',
  'авторизация', 'авторизации', 'авторизацию', 'авторизацией',
  'пароль', 'пароля', 'паролю', 'паролем', 'пароле', 'пароли', 'паролей', 'паролям', 'паролями', 'паролях',
  'логин', 'логина', 'логину', 'логином', 'логине', 'логины', 'логинов', 'логинам', 'логинами', 'логинах',
  'интерфейс', 'интерфейса', 'интерфейсу', 'интерфейсом', 'интерфейсе', 'интерфейсы', 'интерфейсов', 'интерфейсам', 'интерфейсами', 'интерфейсах',
  
  // Дополнительные частоупотребимые термины
  'форматирование', 'редактирование', 'копирование', 'вставка', 'выделение', 'курсор', 'символ', 'строка', 'строки', 'строке', 'строку', 'строкой', 'строк', 'строкам', 'строками', 'строках',
  'проверка', 'проверки', 'проверку', 'проверкой', 'проверке', 'проверок', 'проверкам', 'проверками', 'проверках',
  'орфография', 'орфографии', 'орфографию', 'орфографией',
  'ошибка', 'ошибки', 'ошибке', 'ошибку', 'ошибкой', 'ошибок', 'ошибкам', 'ошибками', 'ошибках',
  'исправление', 'исправления', 'исправлению', 'исправлением', 'исправлении', 'исправлений', 'исправлениям', 'исправлениями', 'исправлениях',
  'совпадение', 'совпадения', 'совпадению', 'совпадением', 'совпадении', 'совпадений', 'совпадениям', 'совпадениями', 'совпадениях',
  'сохранение', 'сохранения', 'сохранению', 'сохранением', 'сохранении', 'сохранений', 'сохранениям', 'сохранениями', 'сохранениях',
  'загрузка', 'загрузки', 'загрузке', 'загрузку', 'загрузкой', 'загрузок', 'загрузкам', 'загрузками', 'загрузках',
  'скачивание', 'скачивания', 'скачиванию', 'скачиванием', 'скачивании', 'скачиваний', 'скачиваниям', 'скачиваниями', 'скачиваниях'
]);

// Типичные суффиксы русских слов
const russianSuffixes = [
  // Существительные
  'ание', 'ение', 'ость', 'ение', 'тель', 'щик', 'чик', 'ник', 'ица', 'ка', 'очка', 'ечка', 'ушка', 'юшка', 'енок', 'ёнок', 'ок', 'ек', 'ик', 'ец', 'ак', 'як', 'ич', 'ич', 'ач', 'яч',
  // Прилагательные
  'ный', 'ной', 'ий', 'ая', 'ое', 'ые', 'ский', 'цкий', 'енный', 'анный', 'яный', 'овый', 'евый', 'ивый', 'ливый', 'чивый', 'истый', 'астый',
  // Глаголы
  'ать', 'ять', 'ить', 'еть', 'оть', 'уть', 'ти', 'чь', 'ать', 'ять', 'ить', 'еть', 'оть', 'уть'
];

// Типичные префиксы
const russianPrefixes = [
  'не', 'пре', 'при', 'под', 'над', 'от', 'до', 'за', 'вы', 'по', 'про', 'пере', 'с', 'со', 'в', 'во', 
  'раз', 'рас', 'без', 'бес', 'из', 'ис', 'воз', 'вос', 'низ', 'нис', 'обо', 'об', 'пред', 'через'
];

export function SpellChecker({ isOpen, onClose, content }: SpellCheckerProps) {
  const [errors, setErrors] = useState<SpellError[]>([]);
  const [isChecking, setIsChecking] = useState(false);
  const [currentErrorIndex, setCurrentErrorIndex] = useState(0);

  // Проверка, является ли слово корректным русским словом
  const isWordCorrect = useCallback((word: string): boolean => {
    const cleanWord = word.toLowerCase().trim();
    
    // Пропускаем очень короткие слова, числа, сокращения, слова с дефисом
    if (cleanWord.length < 2) return true;
    if (/^\d+$/.test(cleanWord)) return true;
    if (/^[А-ЯЁ]{2,}\.?$/.test(word)) return true; // Аббревиатуры
    if (cleanWord.includes('-')) return true; // Слова с дефисом
    if (cleanWord.includes('_')) return true; // Технические термины
    
    // Проверяем только русские буквы
    if (!/^[а-яё]+$/i.test(cleanWord)) return true; // Не русские слова пропускаем
    
    // Проверяем в основном словаре
    if (russianDict.has(cleanWord)) return true;
    
    // Проверяем производные формы
    return checkWordMorphology(cleanWord);
  }, []);

  // Более точный морфологический анализ
  const checkWordMorphology = (word: string): boolean => {
    // Проверяем слова с суффиксами
    for (const suffix of russianSuffixes) {
      if (word.endsWith(suffix) && word.length > suffix.length + 2) {
        const stem = word.slice(0, -suffix.length);
        
        // Проверяем основу в словаре
        if (russianDict.has(stem)) return true;
        
        // Проверяем другие формы с этой основой
        for (const checkSuffix of russianSuffixes.slice(0, 20)) { // Ограничиваем для производительности
          if (russianDict.has(stem + checkSuffix)) return true;
        }
      }
    }
    
    // Проверяем слова с префиксами
    for (const prefix of russianPrefixes) {
      if (word.startsWith(prefix) && word.length > prefix.length + 2) {
        const withoutPrefix = word.slice(prefix.length);
        if (russianDict.has(withoutPrefix)) return true;
        
        // Рекурсивная проверка слова без префикса
        if (checkWordMorphology(withoutPrefix)) return true;
      }
    }
    
    // Проверяем удвоенные согласные (сс, нн, лл, и т.д.)
    const withoutDoubles = word.replace(/([бвгджзклмнпрстфхцчшщ])\1/g, '$1');
    if (withoutDoubles !== word && russianDict.has(withoutDoubles)) return true;
    
    // Проверяем замену ё на е
    if (word.includes('е')) {
      const withYo = word.replace(/е/g, 'ё');
      if (russianDict.has(withYo)) return true;
    }
    if (word.includes('ё')) {
      const withE = word.replace(/ё/g, 'е');
      if (russianDict.has(withE)) return true;
    }
    
    return false;
  };

  // Генерация предложений для исправления
  const getSuggestions = useCallback((word: string): string[] => {
    const suggestions: string[] = [];
    const lowercaseWord = word.toLowerCase();
    
    // 1. Исправление частых ошибок
    const fixedWord = fixCommonErrors(lowercaseWord);
    if (fixedWord !== lowercaseWord && russianDict.has(fixedWord)) {
      suggestions.push(fixedWord);
    }
    
    // 2. Поиск точных совпадений по расстоянию Левенштейна
    const closeMatches: string[] = [];
    for (const dictWord of russianDict) {
      if (dictWord === lowercaseWord) continue;
      
      const distance = getLevenshteinDistance(lowercaseWord, dictWord);
      if (distance <= 2 && distance > 0 && dictWord.length >= lowercaseWord.length - 2) {
        closeMatches.push(dictWord);
      }
      
      if (closeMatches.length >= 10) break; // Ограничиваем для производительности
    }
    
    // Сортируем по длине (ближе к оригиналу)
    closeMatches.sort((a, b) => Math.abs(a.length - lowercaseWord.length) - Math.abs(b.length - lowercaseWord.length));
    suggestions.push(...closeMatches.slice(0, 3));
    
    // 3. Морфологические варианты
    const morphVariants = getMorphologicalVariants(lowercaseWord);
    suggestions.push(...morphVariants);
    
    // Убираем дубликаты и ограничиваем количество
    return [...new Set(suggestions)].slice(0, 4);
  }, []);

  // Исправление частых ошибок
  const fixCommonErrors = (word: string): string => {
    const replacements: Record<string, string> = {
      // Английские буквы на русские
      'a': 'а', 'e': 'е', 'o': 'о', 'p': 'р', 'c': 'с', 'y': 'у', 
      'x': 'х', 'k': 'к', 'h': 'н', 'b': 'в', 'm': 'м', 't': 'т',
      // Часто путаемые буквы
      'и': 'й', 'й': 'и', 'е': 'ё', 'ё': 'е',
      // Удвоенные согласные
      'сс': 'с', 'нн': 'н', 'лл': 'л', 'мм': 'м', 'рр': 'р'
    };
    
    let result = word;
    for (const [wrong, correct] of Object.entries(replacements)) {
      result = result.replace(new RegExp(wrong, 'g'), correct);
    }
    
    return result;
  };

  // Морфологические варианты
  const getMorphologicalVariants = (word: string): string[] => {
    const variants: string[] = [];
    
    // Если слово длинное, попробуем разные окончания
    if (word.length > 4) {
      const stem = word.slice(0, -2);
      
      // Попробуем стандартные окончания
      const endings = ['а', 'я', 'ы', 'и', 'е', 'ё', 'о', 'у', 'ю', 'ой', 'ей', 'ый', 'ий', 'ая', 'яя', 'ое', 'ее'];
      
      for (const ending of endings) {
        const variant = stem + ending;
        if (russianDict.has(variant)) {
          variants.push(variant);
          if (variants.length >= 2) break; // Ограничиваем
        }
      }
    }
    
    return variants;
  };

  // Расстояние Левенштейна (оптимизированная версия)
  const getLevenshteinDistance = (str1: string, str2: string): number => {
    // Оптимизация: если разница в длине слишком большая
    if (Math.abs(str1.length - str2.length) > 3) return 99;
    
    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
    
    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;
    
    for (let j = 1; j <= str2.length; j++) {
      for (let i = 1; i <= str1.length; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,     // вставка
          matrix[j - 1][i] + 1,     // удаление
          matrix[j - 1][i - 1] + indicator  // замена
        );
      }
    }
    
    return matrix[str2.length][str1.length];
  };

  // Основная функция проверки
  const checkSpelling = useCallback(() => {
    setIsChecking(true);
    const foundErrors: SpellError[] = [];
    
    // Находим только русские слова (улучшенный регекс)
    const russianWordRegex = /[а-яё]+/gi;
    let match;
    
    while ((match = russianWordRegex.exec(content)) !== null) {
      const word = match[0];
      const position = match.index;
      
      // Дополнительная фильтрация
      if (word.length >= 2 && !isWordCorrect(word)) {
        const suggestions = getSuggestions(word);
        foundErrors.push({
          word,
          position,
          suggestions
        });
      }
    }
    
    setErrors(foundErrors);
    setCurrentErrorIndex(0);
    setIsChecking(false);
  }, [content, isWordCorrect, getSuggestions]);

  // Исправление ошибки
  const fixError = useCallback((errorIndex: number, replacement: string) => {
    const error = errors[errorIndex];
    if (!error) return;
    
    const fixEvent = new CustomEvent('spell-fix', {
      detail: {
        position: error.position,
        word: error.word,
        replacement: replacement
      }
    });
    window.dispatchEvent(fixEvent);
    
    const newErrors = errors.filter((_, index) => index !== errorIndex);
    setErrors(newErrors);
    
    if (currentErrorIndex >= newErrors.length && newErrors.length > 0) {
      setCurrentErrorIndex(newErrors.length - 1);
    }
  }, [errors, currentErrorIndex]);

  // Пропуск ошибки
  const skipError = useCallback((errorIndex: number) => {
    const newErrors = errors.filter((_, index) => index !== errorIndex);
    setErrors(newErrors);
    
    if (currentErrorIndex >= newErrors.length && newErrors.length > 0) {
      setCurrentErrorIndex(newErrors.length - 1);
    }
  }, [errors, currentErrorIndex]);

  // Автоматическая проверка при изменении контента
  useEffect(() => {
    if (isOpen && content) {
      const timeoutId = setTimeout(() => {
        checkSpelling();
      }, 1000); // Увеличиваем задержку для лучшей производительности
      
      return () => clearTimeout(timeoutId);
    }
  }, [content, isOpen, checkSpelling]);

  if (!isOpen) return null;

  const currentError = errors[currentErrorIndex];

  return (
    <div className="border-b bg-secondary/50 p-4 space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <BookOpen className="h-4 w-4" />
          <h3 className="text-sm font-medium">Проверка орфографии (русский язык)</h3>
          {isChecking && (
            <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin" />
          )}
        </div>
        <Button variant="ghost" size="sm" onClick={onClose}>
          <X className="h-4 w-4" />
        </Button>
      </div>

      <div className="flex items-center gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={checkSpelling}
          disabled={isChecking}
        >
          {isChecking ? 'Проверка...' : 'Проверить заново'}
        </Button>
        
        <Badge variant={errors.length > 0 ? "destructive" : "default"} className="gap-1">
          {errors.length > 0 ? (
            <XCircle className="h-3 w-3" />
          ) : (
            <CheckCircle className="h-3 w-3" />
          )}
          {errors.length === 0 ? 'Ошибок не найдено' : `Найдено ошибок: ${errors.length}`}
        </Badge>
      </div>

      {errors.length > 0 && currentError && (
        <div className="space-y-3 p-3 border rounded-lg bg-background">
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">
              Ошибка {currentErrorIndex + 1} из {errors.length}
            </span>
            <div className="flex gap-1">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentErrorIndex(Math.max(0, currentErrorIndex - 1))}
                disabled={currentErrorIndex === 0}
              >
                ←
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentErrorIndex(Math.min(errors.length - 1, currentErrorIndex + 1))}
                disabled={currentErrorIndex === errors.length - 1}
              >
                →
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <span className="text-sm">Возможная ошибка:</span>
              <Badge variant="destructive">{currentError.word}</Badge>
            </div>

            {currentError.suggestions.length > 0 && (
              <div className="space-y-2">
                <span className="text-sm">Предложения:</span>
                <div className="flex flex-wrap gap-2">
                  {currentError.suggestions.map((suggestion, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => fixError(currentErrorIndex, suggestion)}
                      className="text-sm"
                    >
                      {suggestion}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            <div className="flex gap-2 pt-2">
              <Button
                variant="secondary"
                size="sm"
                onClick={() => skipError(currentErrorIndex)}
              >
                Пропустить
              </Button>
            </div>
          </div>
        </div>
      )}

      <div className="text-xs text-muted-foreground bg-muted/50 p-2 rounded">
        💡 <strong>Информация:</strong> Усовершенствованная проверка анализирует морфологию русских слов. 
        Английский текст, числа, аббревиатуры и технические термины игнорируются.
      </div>
    </div>
  );
}